#!/usr/bin/env python
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#
"""
A tool for creating a list of voters in the given issue group.
"""
import os
import sys

from asf.cli import entrypoint, prompt_yes_no
from brownie.datastructures import Counter

from steve.voters import get_group, hash_file


@entrypoint
def main(cli):
    cli.add_argument('group', help='group name for the voters')
    cli.add_argument('file', help='File containing the list of voter e-mail addresses, one per line')
    cli.add_argument('--non-interactive', action='store_true', dest='no_user_prompt', help='Disables interactive prompting. Assumes \'ok\' unless there are errors.')

    cli.register_exception(ValueError, cli.log.error)

    with cli.run():
        if not cli.args.group.isalnum():
            raise ValueError('Group name must be an alphanumeric token')
        if not os.path.exists(cli.args.file):
            raise ValueError('Voters list %s does not exist' % (cli.args.file,))
        if cli.args.file.startswith('/etc/'):
            raise ValueError('Must not use files in the /etc directory')

        voters = get_group(cli.args.file)
        if not voters:
            raise ValueError('No valid e-mail addresses were found in %s' % (cli.args.file,))

        print 'Here is the list of voter e-mail addresses:'
        print '=============================================================='
        for voter in voters:
            print voter
        print '=============================================================='

        duplicates = len(voters) - len(set(voters))
        if duplicates:
            print 'Found duplicates:\n  %s' % '\n  '.join([x for x, y in Counter(voters).items() if y > 1])
            raise ValueError('%s duplicate voters must be removed from the list' % (duplicates,))

        if not cli.args.no_user_prompt:
            if not prompt_yes_no('Proceed?', default=True):
                sys.exit(1)

        print '\n\n%s: %s' % (hash_file(cli.args.file), cli.args.file)
